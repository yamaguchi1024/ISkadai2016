(define (btree-empty) (cons `() `()))
(define (btree-null? t) (equal? t (btree-empty)))
(define (btree-insert key val t)
  (if (btree-null? t)
    (cons (cons key val) (cons (btree-empty) (btree-empty)))
    (if (equal? (car (car t)) key)
      (cons (cons key val) (cdr t))
      (if (string<? (car (car t)) key)
        (cons (car t) (cons (car (cdr t)) (btree-insert key val (cdr (cdr t)))))
        (cons (car t) (cons (btree-insert key val (car (cdr t))) (cdr (cdr t))))
        )
      )
    )
  )
(define (btree-search key t)
  (if (btree-null? t)
    #f
    (if (equal? (car (car t)) key)
      (cons (car (car t)) (cdr (car t)))
      (if (string<? (car (car t)) key)
        (btree-search key (cdr (cdr t)))
        (btree-search key (car (cdr t)))
        )
      )
    )
  )
(define (btree-delete1 key t)
  (btree-empty))
(define (btree-delete2 key t)
  (if (btree-null? (car (cdr t)))
    (cons (cdr (cdr t)) (cons (btree-empty) (btree-empty)))
    (cons (car (cdr t)) (cons (btree-empty) (btree-empty)))
    )
  )
(define (search-min t)
  (if (btree-null? (car (cdr t)))
    (cons (car (car t)) (cdr (car t)))
    (search-min (car (cdr t)))
    )
  )
(define (delete-min t)
  (if (btree-null? (car (cdr t)))
    (cons (btree-empty) (cdr (cdr t)))
    (cons (car t) (cons (delete-min (car (cdr t))) (cdr (cdr t))))
    )
  )
(define (btree-delete3 key t)
  (cons (search-min (cdr (cdr t))) (cons (car (cdr t)) (delete-min (cdr (cdr t)))))
  )

(define (btree-delete key t)
  (if (equal? (car (car t)) key)
    (if (and (btree-null? (car (cdr t))) (btree-null? (cdr (cdr t))))
      (btree-delete1 key t)
      (if (or (btree-null? (car (cdr t))) (btree-null? (cdr (cdr t))))
        (btree-delete2 key t)
        (btree-delete3 key t)
        )
      )
    (if(string<? (car (car t)) key)
      (cons (car t) (cons (car (cdr t)) (btree-delete key (cdr (cdr t)))))
      (cons (car t) (cons (btree-delete key (car (cdr t))) (cdr (cdr t))))
      )
    )
  )
