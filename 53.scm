(define (ack m n)
  (if (and (= 0 m) (number? n))
    (+ n 1)
    (if (and (number? m) (= n 0))
      (ack (- m 1) 1)
      (let ((a 0) (b 0))
        (cond
          ((number? n)
           (set! a (- m 1))
           (set! b (cons (cons m (- n 1)) '()))
           )
          ((= (car (car n)) 0)
           (set! a m)
           (set! b (cons (cons (car (cdr n)) (+ 1 (cdr (car n)))) (cdr (cdr n))))
           )
          ((= (cdr (car  n)) 0)
           (set! a m)
           (set! b (cons (cons (- (car (car n)) 1) 1) (cdr n)))
           )
          (else
            (set! a m)
            (set! b (cons (cons (car (car n)) (- (cdr (car n)) 1)) (cons (- (car (car n)) 1) (cdr n))))
            )
          )
        (ack a b)
        )
      )
    )
  )

