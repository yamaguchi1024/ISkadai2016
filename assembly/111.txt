以下のプログラムを111.cとして保存した。

#include<stdio.h>
#include<stdlib.h>

typedef struct myuint128 {
    unsigned long digit0;
    unsigned long digit1;
} myuint128_t;

int eq128(myuint128_t a,myuint128_t b){
    return a.digit0 == b.digit0 && a.digit1 == b.digit1;
}

myuint128_t add128(myuint128_t a,myuint128_t b){
    unsigned long digit0,digit1;
//下位64bitはキャリーがほしいのでaddcで計算する。
    asm("addc %0,%1,%2"
//出力オペランド
            : "=r"(digit0)
//入力オペランド
            : "r"(a.digit0),"r"(b.digit0)
//ワークレジスタ
            : "ca");
//上位64bitはキャリーの影響を受けるaddeを使う。
    asm("adde %0,%2,%1"
            : "=r"(digit1)
            : "r"(a.digit1),"r"(b.digit1)
            : "ca");
    return (myuint128_t){digit0,digit1};
}

const myuint128_t tests[][3] = {
    {{0xA05F44019BD79748UL, 0x0000000000003995UL}, {0x7B6F88EC052868B8UL, 0x0000000000009A2CUL}, {0x1BCECCEDA1000000UL, 0x000000000000D3C2UL}},
    {{0xBEAED78ACDC6F714UL, 0x1934D10F478850D4UL}, {0xE69D35AFE6995719UL, 0x0805961D75476A77UL}, {0xA54C0D3AB4604E2DUL, 0x213A672CBCCFBB4CUL}},
    {{0xD97482C3148C06ADUL, 0x81981582D4ED6486UL}, {0xEFBBAA3E5DD5089FUL, 0x8FE78CB9DAD947E9UL}, {0xC9302D0172610F4CUL, 0x117FA23CAFC6AC70UL}}
};

int main() {
    int i;
    for(i = 0; i < (int)(sizeof(tests) / sizeof(*tests)); ++i) {
        myuint128_t r = add128(tests[i][0], tests[i][1]);
        printf("add128(0x%016lx%016lx, 0x%016lx%016lx) = 0x%016lx%016lx\n",
                tests[i][0].digit1, tests[i][0].digit0,
                tests[i][1].digit1, tests[i][1].digit0,
                r.digit1, r.digit0);
        if(!eq128(r, tests[i][2])) 
	    printf("wrong!!:%d\n",i);
        
    }
    return 0;
}


以下のコマンドを実行した。

gcc 111.c -o 111
./111

実行結果。

add128(0x0000000000003995a05f44019bd79748, 0x0000000000009a2c7b6f88ec052868b8) = 0x000000000000d3c21bcecceda1000000
add128(0x1934d10f478850d4beaed78acdc6f714, 0x0805961d75476a77e69d35afe6995719) = 0x213a672cbccfbb4ca54c0d3ab4604e2d
add128(0x81981582d4ed6486d97482c3148c06ad, 0x8fe78cb9dad947e9efbbaa3e5dd5089f) = 0x117fa23cafc6ac70c9302d0172610f4c



ちなみにですが、add128のdissassはこんな感じになり、
(gdb) disass
Dump of assembler code for function add128:
   0x000000001000065c <+0>:	std     r31,-8(r1)
   0x0000000010000660 <+4>:	stdu    r1,-96(r1)
   0x0000000010000664 <+8>:	mr      r31,r1
   0x0000000010000668 <+12>:	addi    r8,r31,48
   0x000000001000066c <+16>:	std     r3,0(r8)
   0x0000000010000670 <+20>:	std     r4,8(r8)
   0x0000000010000674 <+24>:	addi    r8,r31,32
   0x0000000010000678 <+28>:	std     r5,0(r8)
   0x000000001000067c <+32>:	std     r6,8(r8)
   0x0000000010000680 <+36>:	ld      r8,48(r31)
   0x0000000010000684 <+40>:	ld      r7,32(r31)
=> 0x0000000010000688 <+44>:	addc    r8,r8,r7
   0x000000001000068c <+48>:	std     r8,64(r31)
   0x0000000010000690 <+52>:	ld      r8,56(r31)
   0x0000000010000694 <+56>:	ld      r7,40(r31)
   0x0000000010000698 <+60>:	adde    r8,r7,r8
   0x000000001000069c <+64>:	std     r8,72(r31)
   0x00000000100006a0 <+68>:	ld      r9,64(r31)
   0x00000000100006a4 <+72>:	ld      r10,72(r31)
   0x00000000100006a8 <+76>:	mr      r3,r9
   0x00000000100006ac <+80>:	mr      r4,r10
   0x00000000100006b0 <+84>:	addi    r1,r31,96
   0x00000000100006b4 <+88>:	ld      r31,-8(r1)
   0x00000000100006b8 <+92>:	blr
   0x00000000100006bc <+96>:	.long 0x0
   0x00000000100006c0 <+100>:	.long 0x0
   0x00000000100006c4 <+104>:	.long 0x1000180

割とそのままだなと思ったんですが、-O3オプションをつけたら

(gdb) disass add128
Dump of assembler code for function add128:
   0x0000000010000710 <+0>:	addc    r3,r3,r5
   0x0000000010000714 <+4>:	adde    r4,r6,r4
   0x0000000010000718 <+8>:	blr
   0x000000001000071c <+12>:	.long 0x0
   0x0000000010000720 <+16>:	.long 0x0
   0x0000000010000724 <+20>:	.long 0x0

こうなり、神という気分になりました。
